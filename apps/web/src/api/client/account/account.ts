/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Bank API
 * API RESTful completa para gerenciamento banc√°rio com suporte a autentica√ß√£o JWT, opera√ß√µes de contas, transa√ß√µes e gerenciamento de usu√°rios.
 * OpenAPI spec version: 1.0.0
 */

import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { axiosClient } from "../../axiosClient";
import type {
	AccountResponseDto,
	CreateAccountDto,
	UpdateAccountDto,
} from "../../schemas";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Registra uma nova conta banc√°ria para o usu√°rio autenticado. Cada usu√°rio pode ter apenas UMA conta, que √© criada automaticamente durante o registro.
 * @summary Cria uma nova conta banc√°ria
 */
export const create = (
	createAccountDto: CreateAccountDto,
	signal?: AbortSignal,
) => {
	return axiosClient<AccountResponseDto>({
		url: "/account",
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createAccountDto,
		signal,
	});
};

export const getCreateMutationOptions = <
	TError = undefined | undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof create>>,
		TError,
		{ data: CreateAccountDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof create>>,
	TError,
	{ data: CreateAccountDto },
	TContext
> => {
	const mutationKey = ["create"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof create>>,
		{ data: CreateAccountDto }
	> = (props) => {
		const { data } = props ?? {};

		return create(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof create>>
>;
export type CreateMutationBody = CreateAccountDto;
export type CreateMutationError = undefined | undefined | undefined;

/**
 * @summary Cria uma nova conta banc√°ria
 */
export const useCreate = <
	TError = undefined | undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof create>>,
		TError,
		{ data: CreateAccountDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof create>>,
	TError,
	{ data: CreateAccountDto },
	TContext
> => {
	const mutationOptions = getCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Retorna uma lista de todas as contas banc√°rias do sistema
 * @summary Lista todas as contas
 */
export const findAll = (signal?: AbortSignal) => {
	return axiosClient<AccountResponseDto[]>({
		url: "/account",
		method: "GET",
		signal,
	});
};

export const getFindAllQueryKey = () => {
	return ["/account"] as const;
};

export const getFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof findAll>>,
	TError = void,
>(options?: {
	query?: UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findAll>>> = ({
		signal,
	}) => findAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof findAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type FindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof findAll>>
>;
export type FindAllQueryError = undefined;

/**
 * @summary Lista todas as contas
 */

export function useFindAll<
	TData = Awaited<ReturnType<typeof findAll>>,
	TError = void,
>(options?: {
	query?: UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Retorna a √∫nica conta banc√°ria do usu√°rio autenticado. Cada usu√°rio tem apenas uma conta.
 * @summary Retorna a conta √∫nica do usu√°rio
 */
export const findMeAccount = (signal?: AbortSignal) => {
	return axiosClient<AccountResponseDto>({
		url: "/account/me",
		method: "GET",
		signal,
	});
};

export const getFindMeAccountQueryKey = () => {
	return ["/account/me"] as const;
};

export const getFindMeAccountQueryOptions = <
	TData = Awaited<ReturnType<typeof findMeAccount>>,
	TError = undefined | undefined,
>(options?: {
	query?: UseQueryOptions<
		Awaited<ReturnType<typeof findMeAccount>>,
		TError,
		TData
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindMeAccountQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findMeAccount>>> = ({
		signal,
	}) => findMeAccount(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof findMeAccount>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type FindMeAccountQueryResult = NonNullable<
	Awaited<ReturnType<typeof findMeAccount>>
>;
export type FindMeAccountQueryError = undefined | undefined;

/**
 * @summary Retorna a conta √∫nica do usu√°rio
 */

export function useFindMeAccount<
	TData = Awaited<ReturnType<typeof findMeAccount>>,
	TError = undefined | undefined,
>(options?: {
	query?: UseQueryOptions<
		Awaited<ReturnType<typeof findMeAccount>>,
		TError,
		TData
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindMeAccountQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Retorna os dados de uma conta banc√°ria pelo seu UUID
 * @summary Obt√©m uma conta espec√≠fica
 */
export const findOne = (id: string, signal?: AbortSignal) => {
	return axiosClient<AccountResponseDto>({
		url: `/account/${id}`,
		method: "GET",
		signal,
	});
};

export const getFindOneQueryKey = (id?: string) => {
	return [`/account/${id}`] as const;
};

export const getFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof findOne>>,
	TError = undefined | undefined,
>(
	id: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findOne>>> = ({
		signal,
	}) => findOne(id, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData> & {
		queryKey: QueryKey;
	};
};

export type FindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof findOne>>
>;
export type FindOneQueryError = undefined | undefined;

/**
 * @summary Obt√©m uma conta espec√≠fica
 */

export function useFindOne<
	TData = Awaited<ReturnType<typeof findOne>>,
	TError = undefined | undefined,
>(
	id: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Atualiza os dados de uma conta banc√°ria existente
 * @summary Atualiza uma conta banc√°ria
 */
export const update = (id: string, updateAccountDto: UpdateAccountDto) => {
	return axiosClient<AccountResponseDto>({
		url: `/account/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateAccountDto,
	});
};

export const getUpdateMutationOptions = <
	TError = undefined | undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof update>>,
		TError,
		{ id: string; data: UpdateAccountDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof update>>,
	TError,
	{ id: string; data: UpdateAccountDto },
	TContext
> => {
	const mutationKey = ["update"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof update>>,
		{ id: string; data: UpdateAccountDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return update(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof update>>
>;
export type UpdateMutationBody = UpdateAccountDto;
export type UpdateMutationError = undefined | undefined | undefined;

/**
 * @summary Atualiza uma conta banc√°ria
 */
export const useUpdate = <
	TError = undefined | undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof update>>,
		TError,
		{ id: string; data: UpdateAccountDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof update>>,
	TError,
	{ id: string; data: UpdateAccountDto },
	TContext
> => {
	const mutationOptions = getUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Remove uma conta banc√°ria do sistema
 * @summary Deleta uma conta banc√°ria
 */
export const remove = (id: string) => {
	return axiosClient<void>({ url: `/account/${id}`, method: "DELETE" });
};

export const getRemoveMutationOptions = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof remove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof remove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["remove"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof remove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return remove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type RemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof remove>>
>;

export type RemoveMutationError = undefined | undefined;

/**
 * @summary Deleta uma conta banc√°ria
 */
export const useRemove = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof remove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof remove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Aprova um empr√©stimo e atualiza o saldo da conta
 * @summary Solicita um empr√©stimo para uma conta
 */
export const loanRequest = (id: string, signal?: AbortSignal) => {
	return axiosClient<void>({
		url: `/account/${id}/loan`,
		method: "POST",
		signal,
	});
};

export const getLoanRequestMutationOptions = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof loanRequest>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof loanRequest>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["loanRequest"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof loanRequest>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return loanRequest(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type LoanRequestMutationResult = NonNullable<
	Awaited<ReturnType<typeof loanRequest>>
>;

export type LoanRequestMutationError = undefined | undefined;

/**
 * @summary Solicita um empr√©stimo para uma conta
 */
export const useLoanRequest = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof loanRequest>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof loanRequest>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getLoanRequestMutationOptions(options);

	return useMutation(mutationOptions);
};
