/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Bank API
 * API RESTful completa para gerenciamento banc√°rio com suporte a autentica√ß√£o JWT, opera√ß√µes de contas, transa√ß√µes e gerenciamento de usu√°rios.
 * OpenAPI spec version: 1.0.0
 */

import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { axiosClient } from "../../axiosClient";
import type {
	CreateTransactionDto,
	CreateTransactionResponseDto,
	FindAllByAccountParams,
	TransactionResponseDto,
	TransactionStatusDto,
} from "../../schemas";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Cria uma nova transa√ß√£o entre duas contas. A transa√ß√£o √© inicialmente criada com status PENDING e √© enfileirada no RabbitMQ para processamento ass√≠ncrono
 * @summary Cria uma nova transa√ß√£o banc√°ria
 */
export const create = (
	createTransactionDto: CreateTransactionDto,
	signal?: AbortSignal,
) => {
	return axiosClient<CreateTransactionResponseDto>({
		url: "/transaction",
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createTransactionDto,
		signal,
	});
};

export const getCreateMutationOptions = <
	TError = undefined | undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof create>>,
		TError,
		{ data: CreateTransactionDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof create>>,
	TError,
	{ data: CreateTransactionDto },
	TContext
> => {
	const mutationKey = ["create"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof create>>,
		{ data: CreateTransactionDto }
	> = (props) => {
		const { data } = props ?? {};

		return create(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof create>>
>;
export type CreateMutationBody = CreateTransactionDto;
export type CreateMutationError = undefined | undefined | undefined;

/**
 * @summary Cria uma nova transa√ß√£o banc√°ria
 */
export const useCreate = <
	TError = undefined | undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof create>>,
		TError,
		{ data: CreateTransactionDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof create>>,
	TError,
	{ data: CreateTransactionDto },
	TContext
> => {
	const mutationOptions = getCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Retorna uma lista de todas as transa√ß√µes banc√°rias registradas no sistema
 * @summary Lista todas as transa√ß√µes
 */
export const findAll = (signal?: AbortSignal) => {
	return axiosClient<TransactionResponseDto[]>({
		url: "/transaction",
		method: "GET",
		signal,
	});
};

export const getFindAllQueryKey = () => {
	return ["/transaction"] as const;
};

export const getFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof findAll>>,
	TError = void,
>(options?: {
	query?: UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findAll>>> = ({
		signal,
	}) => findAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof findAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type FindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof findAll>>
>;
export type FindAllQueryError = undefined;

/**
 * @summary Lista todas as transa√ß√µes
 */

export function useFindAll<
	TData = Awaited<ReturnType<typeof findAll>>,
	TError = void,
>(options?: {
	query?: UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Retorna todas as transa√ß√µes (enviadas e recebidas) de uma conta banc√°ria
 * @summary Lista transa√ß√µes de uma conta espec√≠fica
 */
export const findAllByAccount = (
	id: string,
	params?: FindAllByAccountParams,
	signal?: AbortSignal,
) => {
	return axiosClient<TransactionResponseDto[]>({
		url: `/transaction/${id}/list-by-account`,
		method: "GET",
		params,
		signal,
	});
};

export const getFindAllByAccountQueryKey = (
	id?: string,
	params?: FindAllByAccountParams,
) => {
	return [
		`/transaction/${id}/list-by-account`,
		...(params ? [params] : []),
	] as const;
};

export const getFindAllByAccountQueryOptions = <
	TData = Awaited<ReturnType<typeof findAllByAccount>>,
	TError = undefined | undefined,
>(
	id: string,
	params?: FindAllByAccountParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof findAllByAccount>>,
			TError,
			TData
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getFindAllByAccountQueryKey(id, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof findAllByAccount>>
	> = ({ signal }) => findAllByAccount(id, params, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof findAllByAccount>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type FindAllByAccountQueryResult = NonNullable<
	Awaited<ReturnType<typeof findAllByAccount>>
>;
export type FindAllByAccountQueryError = undefined | undefined;

/**
 * @summary Lista transa√ß√µes de uma conta espec√≠fica
 */

export function useFindAllByAccount<
	TData = Awaited<ReturnType<typeof findAllByAccount>>,
	TError = undefined | undefined,
>(
	id: string,
	params?: FindAllByAccountParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof findAllByAccount>>,
			TError,
			TData
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindAllByAccountQueryOptions(id, params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Retorna os dados detalhados de uma transa√ß√£o pelo seu UUID
 * @summary Obt√©m uma transa√ß√£o espec√≠fica
 */
export const findOne = (id: string, signal?: AbortSignal) => {
	return axiosClient<TransactionResponseDto>({
		url: `/transaction/${id}`,
		method: "GET",
		signal,
	});
};

export const getFindOneQueryKey = (id?: string) => {
	return [`/transaction/${id}`] as const;
};

export const getFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof findOne>>,
	TError = undefined | undefined,
>(
	id: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findOne>>> = ({
		signal,
	}) => findOne(id, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData> & {
		queryKey: QueryKey;
	};
};

export type FindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof findOne>>
>;
export type FindOneQueryError = undefined | undefined;

/**
 * @summary Obt√©m uma transa√ß√£o espec√≠fica
 */

export function useFindOne<
	TData = Awaited<ReturnType<typeof findOne>>,
	TError = undefined | undefined,
>(
	id: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Fornece um fluxo Server-Sent Events (SSE) que envia atualiza√ß√µes em tempo real sobre o status de uma transa√ß√£o espec√≠fica
 * @summary Fluxo SSE para atualiza√ß√µes de status da transa√ß√£o
 */
export const sse = (transactionId: string, signal?: AbortSignal) => {
	return axiosClient<TransactionStatusDto>({
		url: `/transaction/${transactionId}/sse`,
		method: "GET",
		signal,
	});
};

export const getSseQueryKey = (transactionId?: string) => {
	return [`/transaction/${transactionId}/sse`] as const;
};

export const getSseQueryOptions = <
	TData = Awaited<ReturnType<typeof sse>>,
	TError = undefined | undefined,
>(
	transactionId: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof sse>>, TError, TData>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getSseQueryKey(transactionId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof sse>>> = ({
		signal,
	}) => sse(transactionId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!transactionId,
		...queryOptions,
	} as UseQueryOptions<Awaited<ReturnType<typeof sse>>, TError, TData> & {
		queryKey: QueryKey;
	};
};

export type SseQueryResult = NonNullable<Awaited<ReturnType<typeof sse>>>;
export type SseQueryError = undefined | undefined;

/**
 * @summary Fluxo SSE para atualiza√ß√µes de status da transa√ß√£o
 */

export function useSse<
	TData = Awaited<ReturnType<typeof sse>>,
	TError = undefined | undefined,
>(
	transactionId: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof sse>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getSseQueryOptions(transactionId, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
