/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Bank API
 * API RESTful completa para gerenciamento banc√°rio com suporte a autentica√ß√£o JWT, opera√ß√µes de contas, transa√ß√µes e gerenciamento de usu√°rios.
 * OpenAPI spec version: 1.0.0
 */

import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { axiosClient } from "../../axiosClient";
import type {
	AccountKeyResponseDto,
	CreateAccountKeyDto,
	FindByKey200,
	FindByKeyParams,
	UpdateAccountKeyDto,
} from "../../schemas";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Cria uma nova chave PIX vinculada a uma conta
 * @summary Criar nova chave PIX
 */
export const create = (
	createAccountKeyDto: CreateAccountKeyDto,
	signal?: AbortSignal,
) => {
	return axiosClient<AccountKeyResponseDto>({
		url: "/account-key",
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createAccountKeyDto,
		signal,
	});
};

export const getCreateMutationOptions = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof create>>,
		TError,
		{ data: CreateAccountKeyDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof create>>,
	TError,
	{ data: CreateAccountKeyDto },
	TContext
> => {
	const mutationKey = ["create"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof create>>,
		{ data: CreateAccountKeyDto }
	> = (props) => {
		const { data } = props ?? {};

		return create(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof create>>
>;
export type CreateMutationBody = CreateAccountKeyDto;
export type CreateMutationError = undefined | undefined;

/**
 * @summary Criar nova chave PIX
 */
export const useCreate = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof create>>,
		TError,
		{ data: CreateAccountKeyDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof create>>,
	TError,
	{ data: CreateAccountKeyDto },
	TContext
> => {
	const mutationOptions = getCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Lista todas as chaves PIX vinculadas √†s contas do usu√°rio
 * @summary Listar chaves PIX do usu√°rio
 */
export const findAll = (signal?: AbortSignal) => {
	return axiosClient<AccountKeyResponseDto[]>({
		url: "/account-key",
		method: "GET",
		signal,
	});
};

export const getFindAllQueryKey = () => {
	return ["/account-key"] as const;
};

export const getFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof findAll>>,
	TError = unknown,
>(options?: {
	query?: UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findAll>>> = ({
		signal,
	}) => findAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof findAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type FindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof findAll>>
>;
export type FindAllQueryError = unknown;

/**
 * @summary Listar chaves PIX do usu√°rio
 */

export function useFindAll<
	TData = Awaited<ReturnType<typeof findAll>>,
	TError = unknown,
>(options?: {
	query?: UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Busca uma chave PIX pelo seu valor e retorna informa√ß√µes da conta vinculada
 * @summary Buscar chave PIX por valor
 */
export const findByKey = (params: FindByKeyParams, signal?: AbortSignal) => {
	return axiosClient<FindByKey200>({
		url: "/account-key/search",
		method: "GET",
		params,
		signal,
	});
};

export const getFindByKeyQueryKey = (params?: FindByKeyParams) => {
	return ["/account-key/search", ...(params ? [params] : [])] as const;
};

export const getFindByKeyQueryOptions = <
	TData = Awaited<ReturnType<typeof findByKey>>,
	TError = void,
>(
	params: FindByKeyParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof findByKey>>,
			TError,
			TData
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindByKeyQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findByKey>>> = ({
		signal,
	}) => findByKey(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof findByKey>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type FindByKeyQueryResult = NonNullable<
	Awaited<ReturnType<typeof findByKey>>
>;
export type FindByKeyQueryError = undefined;

/**
 * @summary Buscar chave PIX por valor
 */

export function useFindByKey<
	TData = Awaited<ReturnType<typeof findByKey>>,
	TError = void,
>(
	params: FindByKeyParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof findByKey>>,
			TError,
			TData
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindByKeyQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Retorna uma chave PIX espec√≠fica pelo seu ID
 * @summary Buscar chave PIX por ID
 */
export const findOne = (id: string, signal?: AbortSignal) => {
	return axiosClient<AccountKeyResponseDto>({
		url: `/account-key/${id}`,
		method: "GET",
		signal,
	});
};

export const getFindOneQueryKey = (id?: string) => {
	return [`/account-key/${id}`] as const;
};

export const getFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof findOne>>,
	TError = void,
>(
	id: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findOne>>> = ({
		signal,
	}) => findOne(id, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData> & {
		queryKey: QueryKey;
	};
};

export type FindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof findOne>>
>;
export type FindOneQueryError = undefined;

/**
 * @summary Buscar chave PIX por ID
 */

export function useFindOne<
	TData = Awaited<ReturnType<typeof findOne>>,
	TError = void,
>(
	id: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Atualiza o valor de uma chave PIX existente
 * @summary Atualizar chave PIX
 */
export const update = (
	id: string,
	updateAccountKeyDto: UpdateAccountKeyDto,
) => {
	return axiosClient<AccountKeyResponseDto>({
		url: `/account-key/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateAccountKeyDto,
	});
};

export const getUpdateMutationOptions = <
	TError = void,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof update>>,
		TError,
		{ id: string; data: UpdateAccountKeyDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof update>>,
	TError,
	{ id: string; data: UpdateAccountKeyDto },
	TContext
> => {
	const mutationKey = ["update"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof update>>,
		{ id: string; data: UpdateAccountKeyDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return update(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof update>>
>;
export type UpdateMutationBody = UpdateAccountKeyDto;
export type UpdateMutationError = undefined;

/**
 * @summary Atualizar chave PIX
 */
export const useUpdate = <TError = void, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof update>>,
		TError,
		{ id: string; data: UpdateAccountKeyDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof update>>,
	TError,
	{ id: string; data: UpdateAccountKeyDto },
	TContext
> => {
	const mutationOptions = getUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Remove uma chave PIX (exclus√£o l√≥gica)
 * @summary Remover chave PIX
 */
export const remove = (id: string) => {
	return axiosClient<void>({ url: `/account-key/${id}`, method: "DELETE" });
};

export const getRemoveMutationOptions = <
	TError = void,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof remove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof remove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["remove"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof remove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return remove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type RemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof remove>>
>;

export type RemoveMutationError = undefined;

/**
 * @summary Remover chave PIX
 */
export const useRemove = <TError = void, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof remove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof remove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
