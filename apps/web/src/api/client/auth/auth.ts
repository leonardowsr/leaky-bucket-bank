/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Bank API
 * API RESTful completa para gerenciamento banc√°rio com suporte a autentica√ß√£o JWT, opera√ß√µes de contas, transa√ß√µes e gerenciamento de usu√°rios.
 * OpenAPI spec version: 1.0.0
 */

import type {
	MutationFunction,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";
import { axiosClient } from "../../axiosClient";
import type {
	LoginDto,
	RefreshTokenDto,
	RegisterDto,
	RegisterResponseDto,
} from "../../schemas";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Autentica um usu√°rio com email e senha, retornando tokens JWT em cookies
 * @summary Faz login do usu√°rio
 */
export const login = (loginDto: LoginDto, signal?: AbortSignal) => {
	return axiosClient<void>({
		url: "/auth/login",
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: loginDto,
		signal,
	});
};

export const getLoginMutationOptions = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof login>>,
		TError,
		{ data: LoginDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: LoginDto },
	TContext
> => {
	const mutationKey = ["login"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof login>>,
		{ data: LoginDto }
	> = (props) => {
		const { data } = props ?? {};

		return login(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
	Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = LoginDto;
export type LoginMutationError = undefined | undefined;

/**
 * @summary Faz login do usu√°rio
 */
export const useLogin = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof login>>,
		TError,
		{ data: LoginDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: LoginDto },
	TContext
> => {
	const mutationOptions = getLoginMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Cria uma nova conta de usu√°rio com email, nome e senha
 * @summary Registra um novo usu√°rio
 */
export const register = (registerDto: RegisterDto, signal?: AbortSignal) => {
	return axiosClient<RegisterResponseDto>({
		url: "/auth/register",
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: registerDto,
		signal,
	});
};

export const getRegisterMutationOptions = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof register>>,
		TError,
		{ data: RegisterDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof register>>,
	TError,
	{ data: RegisterDto },
	TContext
> => {
	const mutationKey = ["register"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof register>>,
		{ data: RegisterDto }
	> = (props) => {
		const { data } = props ?? {};

		return register(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RegisterMutationResult = NonNullable<
	Awaited<ReturnType<typeof register>>
>;
export type RegisterMutationBody = RegisterDto;
export type RegisterMutationError = undefined | undefined;

/**
 * @summary Registra um novo usu√°rio
 */
export const useRegister = <
	TError = undefined | undefined,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof register>>,
		TError,
		{ data: RegisterDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof register>>,
	TError,
	{ data: RegisterDto },
	TContext
> => {
	const mutationOptions = getRegisterMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Gera um novo access token usando um refresh token do cookie
 * @summary Renova o token de acesso
 */
export const refreshToken = (
	refreshTokenDto: RefreshTokenDto,
	signal?: AbortSignal,
) => {
	return axiosClient<void>({
		url: "/auth/refresh-token",
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: refreshTokenDto,
		signal,
	});
};

export const getRefreshTokenMutationOptions = <
	TError = void,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof refreshToken>>,
		TError,
		{ data: RefreshTokenDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof refreshToken>>,
	TError,
	{ data: RefreshTokenDto },
	TContext
> => {
	const mutationKey = ["refreshToken"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof refreshToken>>,
		{ data: RefreshTokenDto }
	> = (props) => {
		const { data } = props ?? {};

		return refreshToken(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RefreshTokenMutationResult = NonNullable<
	Awaited<ReturnType<typeof refreshToken>>
>;
export type RefreshTokenMutationBody = RefreshTokenDto;
export type RefreshTokenMutationError = undefined;

/**
 * @summary Renova o token de acesso
 */
export const useRefreshToken = <TError = void, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof refreshToken>>,
		TError,
		{ data: RefreshTokenDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof refreshToken>>,
	TError,
	{ data: RefreshTokenDto },
	TContext
> => {
	const mutationOptions = getRefreshTokenMutationOptions(options);

	return useMutation(mutationOptions);
};
