/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Bank API
 * API RESTful completa para gerenciamento banc√°rio com suporte a autentica√ß√£o JWT, opera√ß√µes de contas, transa√ß√µes e gerenciamento de usu√°rios.
 * OpenAPI spec version: 1.0.0
 */

import type {
	QueryFunction,
	QueryKey,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { axiosClient } from "../../axiosClient";
import type { FindAllParams, UserResponseDto } from "../../schemas";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Retorna uma lista paginada de usu√°rios cadastrados no sistema
 * @summary Lista todos os usu√°rios
 */
export const findAll = (params?: FindAllParams, signal?: AbortSignal) => {
	return axiosClient<UserResponseDto[]>({
		url: "/users",
		method: "GET",
		params,
		signal,
	});
};

export const getFindAllQueryKey = (params?: FindAllParams) => {
	return ["/users", ...(params ? [params] : [])] as const;
};

export const getFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof findAll>>,
	TError = void,
>(
	params?: FindAllParams,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findAll>>> = ({
		signal,
	}) => findAll(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof findAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type FindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof findAll>>
>;
export type FindAllQueryError = undefined;

/**
 * @summary Lista todos os usu√°rios
 */

export function useFindAll<
	TData = Awaited<ReturnType<typeof findAll>>,
	TError = void,
>(
	params?: FindAllParams,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindAllQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Retorna os dados do pr√≥prio usu√°rio autenticado via token JWT
 * @summary Obt√©m dados do usu√°rio autenticado
 */
export const findMeUser = (signal?: AbortSignal) => {
	return axiosClient<UserResponseDto>({
		url: "/users/me",
		method: "GET",
		signal,
	});
};

export const getFindMeUserQueryKey = () => {
	return ["/users/me"] as const;
};

export const getFindMeUserQueryOptions = <
	TData = Awaited<ReturnType<typeof findMeUser>>,
	TError = undefined | undefined,
>(options?: {
	query?: UseQueryOptions<
		Awaited<ReturnType<typeof findMeUser>>,
		TError,
		TData
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindMeUserQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findMeUser>>> = ({
		signal,
	}) => findMeUser(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof findMeUser>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type FindMeUserQueryResult = NonNullable<
	Awaited<ReturnType<typeof findMeUser>>
>;
export type FindMeUserQueryError = undefined | undefined;

/**
 * @summary Obt√©m dados do usu√°rio autenticado
 */

export function useFindMeUser<
	TData = Awaited<ReturnType<typeof findMeUser>>,
	TError = undefined | undefined,
>(options?: {
	query?: UseQueryOptions<
		Awaited<ReturnType<typeof findMeUser>>,
		TError,
		TData
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindMeUserQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Retorna os dados de um usu√°rio pelo seu UUID
 * @summary Obt√©m um usu√°rio espec√≠fico
 */
export const findOne = (id: string, signal?: AbortSignal) => {
	return axiosClient<UserResponseDto>({
		url: `/users/${id}`,
		method: "GET",
		signal,
	});
};

export const getFindOneQueryKey = (id?: string) => {
	return [`/users/${id}`] as const;
};

export const getFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof findOne>>,
	TError = undefined | undefined,
>(
	id: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof findOne>>> = ({
		signal,
	}) => findOne(id, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData> & {
		queryKey: QueryKey;
	};
};

export type FindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof findOne>>
>;
export type FindOneQueryError = undefined | undefined;

/**
 * @summary Obt√©m um usu√°rio espec√≠fico
 */

export function useFindOne<
	TData = Awaited<ReturnType<typeof findOne>>,
	TError = undefined | undefined,
>(
	id: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
